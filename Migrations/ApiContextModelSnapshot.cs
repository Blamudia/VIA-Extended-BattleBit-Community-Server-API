// <auto-generated />
using System;
using System.Collections.Generic;
using BBR.Community.API;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CommunityServerAPI.Migrations
{
    [DbContext(typeof(ApiContext))]
    partial class ApiContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CommunityServerAPI.VIA.Modules.Players.Context.Models.Player", b =>
                {
                    b.Property<decimal>("SteamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("steam_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<bool>("IsAPenguin")
                        .HasColumnType("boolean")
                        .HasColumnName("is_a_penguin");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("SteamId")
                        .HasName("pk_player");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_player_deleted_at");

                    b.ToTable("player", "player_data");
                });

            modelBuilder.Entity("CommunityServerAPI.VIA.Modules.Players.Context.Models.PlayerProgress", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<IEnumerable<byte>>("Achievements")
                        .HasColumnType("jsonb")
                        .HasColumnName("achievements");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<decimal>("PlayerId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("player_id");

                    b.Property<IEnumerable<byte>>("Selections")
                        .HasColumnType("jsonb")
                        .HasColumnName("selections");

                    b.Property<IEnumerable<byte>>("ToolProgress")
                        .HasColumnType("jsonb")
                        .HasColumnName("tool_progress");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_progress");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_progress_deleted_at");

                    b.HasIndex("PlayerId")
                        .IsUnique()
                        .HasDatabaseName("ix_progress_player_id");

                    b.ToTable("progress", "player_data");
                });

            modelBuilder.Entity("CommunityServerAPI.VIA.Modules.Players.Context.Models.PlayerStats", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("deleted_at");

                    b.Property<long>("KillCount")
                        .HasColumnType("bigint")
                        .HasColumnName("kill_count");

                    b.Property<decimal>("PlayerId")
                        .HasColumnType("numeric(20,0)")
                        .HasColumnName("player_id");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("updated_at");

                    b.HasKey("Id")
                        .HasName("pk_stats");

                    b.HasIndex("DeletedAt")
                        .HasDatabaseName("ix_stats_deleted_at");

                    b.HasIndex("PlayerId")
                        .IsUnique()
                        .HasDatabaseName("ix_stats_player_id");

                    b.ToTable("stats", "player_data");
                });

            modelBuilder.Entity("CommunityServerAPI.VIA.Modules.Players.Context.Models.PlayerProgress", b =>
                {
                    b.HasOne("CommunityServerAPI.VIA.Modules.Players.Context.Models.Player", "Player")
                        .WithOne("Progress")
                        .HasForeignKey("CommunityServerAPI.VIA.Modules.Players.Context.Models.PlayerProgress", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_progress_player_player_id");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CommunityServerAPI.VIA.Modules.Players.Context.Models.PlayerStats", b =>
                {
                    b.HasOne("CommunityServerAPI.VIA.Modules.Players.Context.Models.Player", "Player")
                        .WithOne("Stats")
                        .HasForeignKey("CommunityServerAPI.VIA.Modules.Players.Context.Models.PlayerStats", "PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("fk_stats_player_player_id");

                    b.Navigation("Player");
                });

            modelBuilder.Entity("CommunityServerAPI.VIA.Modules.Players.Context.Models.Player", b =>
                {
                    b.Navigation("Progress");

                    b.Navigation("Stats");
                });
#pragma warning restore 612, 618
        }
    }
}
